"use strict";(self.webpackChunkmeteor=self.webpackChunkmeteor||[]).push([[574],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),k=r,d=u["".concat(s,".").concat(k)]||u[k]||m[k]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3012:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="Sink",l={unversionedId:"concepts/sink",id:"concepts/sink",title:"Sink",description:"sinks are used to define the medium of consuming the metadata being extracted. You need to specify at least one sink or can specify multiple sinks in a recipe, this will prevent you from having to create duplicate recipes for the same job. The given examples show you its correct usage if your sink is http and kafka.",source:"@site/docs/concepts/sink.md",sourceDirName:"concepts",slug:"/concepts/sink",permalink:"/meteor/docs/concepts/sink",draft:!1,editUrl:"https://github.com/raystack/meteor/edit/master/docs/docs/concepts/sink.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Processor",permalink:"/meteor/docs/concepts/processor"},next:{title:"Commands",permalink:"/meteor/docs/reference/commands"}},s={},c=[{value:"Writing <code>sinks</code> part of your recipe",id:"writing-sinks-part-of-your-recipe",level:2},{value:"Available Sinks",id:"available-sinks",level:2},{value:"Upcoming sinks",id:"upcoming-sinks",level:2},{value:"Serializer",id:"serializer",level:2},{value:"Custom Sink",id:"custom-sink",level:2},{value:"Sample Custom Sink",id:"sample-custom-sink",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sink"},"Sink"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sinks")," are used to define the medium of consuming the metadata being extracted. You need to specify ",(0,r.kt)("strong",{parentName:"p"},"at least one")," sink or can specify multiple sinks in a recipe, this will prevent you from having to create duplicate recipes for the same job. The given examples show you its correct usage if your sink is ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kafka"),"."),(0,r.kt)("h2",{id:"writing-sinks-part-of-your-recipe"},"Writing ",(0,r.kt)("inlineCode",{parentName:"h2"},"sinks")," part of your recipe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'sinks: # required - at least 1 sink defined\n  - name: http\n    config:\n      method: POST\n      url: "https://example.com/metadata"\n  - name: kafka\n    config:\n      brokers: localhost:9092\n      topic: "target-topic"\n      key_path:\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"requirement"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"left"},"contains the name of sink"),(0,r.kt)("td",{parentName:"tr",align:"left"},"required")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"config")),(0,r.kt)("td",{parentName:"tr",align:"left"},"different sinks will require different configuration"),(0,r.kt)("td",{parentName:"tr",align:"left"},"optional, depends on sink")))),(0,r.kt)("h2",{id:"available-sinks"},"Available Sinks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Console"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: sample-recipe\nsinks:\n  - name: console\n")),(0,r.kt)("p",null,"Print metadata to stdout."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"File"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'sinks:\n    name: file\n    config:\n        path: "./dir/sample.yaml"\n        format: "yaml"\n')),(0,r.kt)("p",null,"Sinks metadata to a file in ",(0,r.kt)("inlineCode",{parentName:"p"},"json/yaml")," format as per the config defined."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Google Cloud Storage"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'sinks:\n  - name: gcs\n    config:\n     project_id: google-project-id\n     url: gcs://bucket_name/target_folder\n     object_prefix : github-users\n     service_account_base64: <base64 encoded service account key>\n     service_account_json:\n      {\n        "type": "service_account",\n        "private_key_id": "xxxxxxx",\n        "private_key": "xxxxxxx",\n        "client_email": "xxxxxxx",\n        "client_id": "xxxxxxx",\n        "auth_uri": "https://accounts.google.com/o/oauth2/auth",\n        "token_uri": "https://oauth2.googleapis.com/token",\n        "auth_provider_x509_cert_url": "xxxxxxx",\n        "client_x509_cert_url": "xxxxxxx",\n      }\n')),(0,r.kt)("p",null,"Sinks json data to a file as ndjson format in Google Cloud Storage bucket"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"http"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"sinks:\n  name: http\n  config:\n    method: POST\n    success_code: 200\n    url: https://compass.com/v1beta1/asset\n    headers:\n      Header-1: value11,value12\n")),(0,r.kt)("p",null,"Sinks metadata to a http destination as per the config defined."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Stencil"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"sinks:\n  name: stencil\n  config:\n    host: https://stencil.com\n    namespace_id: myNamespace\n    schema_id: mySchema\n    format: json\n    send_format_header: false\n")),(0,r.kt)("p",null,"Upload metadata of a given schema ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," in the existing ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace_id")," present in Stencil. Request will be sent via HTTP to a given host."),(0,r.kt)("h2",{id:"upcoming-sinks"},"Upcoming sinks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP"),(0,r.kt)("li",{parentName:"ul"},"Kafka")),(0,r.kt)("h2",{id:"serializer"},"Serializer"),(0,r.kt)("p",null,"By default, metadata would be serialized into JSON format before sinking. To send it using other formats, a serializer needs to be defined in the sink config."),(0,r.kt)("h2",{id:"custom-sink"},"Custom Sink"),(0,r.kt)("p",null,"Meteor has built-in sinks like Kafka and HTTP which users can just use directly. We will also allow creating custom sinks for DRY purposes."),(0,r.kt)("p",null,"It will be useful if you can find yourself sinking multiple metadata sources to one place."),(0,r.kt)("h3",{id:"sample-custom-sink"},"Sample Custom Sink"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"central","_","metadata","_","store","_","sink.yaml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: central-metadata-store # unique sink name as an ID\nsink:\n  - name: http\n    config:\n      method: PUT\n      url: "https://metadata-store.com/metadata"\n')),(0,r.kt)("p",null,"More info about available sinks can be found ",(0,r.kt)("a",{parentName:"p",href:"/meteor/docs/reference/sinks"},"here"),"."))}m.isMDXComponent=!0}}]);