// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: feast/core/CoreService.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	// Retrieve version information about this Feast deployment
	GetFeastCoreVersion(ctx context.Context, in *GetFeastCoreVersionRequest, opts ...grpc.CallOption) (*GetFeastCoreVersionResponse, error)
	// Returns a specific entity
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	// Returns all feature references and respective features matching that filter. If none are found
	// an empty map will be returned
	// If no filter is provided in the request, the response will contain all the features
	// currently stored in the default project.
	ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error)
	// Create or update and existing entity.
	//
	// This function is idempotent - it will not create a new entity if schema does not change.
	// Schema changes will update the entity if the changes are valid.
	// Following changes are not valid:
	// - Changes to name
	// - Changes to type
	ApplyEntity(ctx context.Context, in *ApplyEntityRequest, opts ...grpc.CallOption) (*ApplyEntityResponse, error)
	// Returns all entity references and respective entities matching that filter. If none are found
	// an empty map will be returned
	// If no filter is provided in the request, the response will contain all the entities
	// currently stored in the default project.
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	// Creates a project. Projects serve as namespaces within which resources like features will be
	// created. Feature table names as must be unique within a project while field (Feature/Entity) names
	// must be unique within a Feature Table. Project names themselves must be globally unique.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Archives a project. Archived projects will continue to exist and function, but won't be visible
	// through the Core API. Any existing ingestion or serving requests will continue to function,
	// but will result in warning messages being logged. It is not possible to unarchive a project
	// through the Core API
	ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error)
	// Lists all projects active projects.
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Create or update an existing feature table.
	// This function is idempotent - it will not create a new feature table if the schema does not change.
	// Schema changes will update the feature table if the changes are valid.
	// All changes except the following are valid:
	// - Changes to feature table name.
	// - Changes to entities
	// - Changes to feature name and type
	ApplyFeatureTable(ctx context.Context, in *ApplyFeatureTableRequest, opts ...grpc.CallOption) (*ApplyFeatureTableResponse, error)
	// List feature tables that match a given filter.
	// Returns the references of the Feature Tables matching that filter. If none are found,
	// an empty list will be returned.
	// If no filter is provided in the request, the response will match all the feature
	// tables currently stored in the registry.
	ListFeatureTables(ctx context.Context, in *ListFeatureTablesRequest, opts ...grpc.CallOption) (*ListFeatureTablesResponse, error)
	// Returns a specific feature table
	GetFeatureTable(ctx context.Context, in *GetFeatureTableRequest, opts ...grpc.CallOption) (*GetFeatureTableResponse, error)
	// Delete a specific feature table
	DeleteFeatureTable(ctx context.Context, in *DeleteFeatureTableRequest, opts ...grpc.CallOption) (*DeleteFeatureTableResponse, error)
	// Lists all online stores
	ListOnlineStores(ctx context.Context, in *ListOnlineStoresRequest, opts ...grpc.CallOption) (*ListOnlineStoresResponse, error)
	// Returns a specific online stores
	GetOnlineStore(ctx context.Context, in *GetOnlineStoreRequest, opts ...grpc.CallOption) (*GetOnlineStoreResponse, error)
	// Registers new online store to feast core
	// or updates properties for existing online store
	RegisterOnlineStore(ctx context.Context, in *RegisterOnlineStoreRequest, opts ...grpc.CallOption) (*RegisterOnlineStoreResponse, error)
	// Archives an online store to mark it deprecated
	ArchiveOnlineStore(ctx context.Context, in *ArchiveOnlineStoreRequest, opts ...grpc.CallOption) (*ArchiveOnlineStoreResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) GetFeastCoreVersion(ctx context.Context, in *GetFeastCoreVersionRequest, opts ...grpc.CallOption) (*GetFeastCoreVersionResponse, error) {
	out := new(GetFeastCoreVersionResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/GetFeastCoreVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesResponse, error) {
	out := new(ListFeaturesResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ApplyEntity(ctx context.Context, in *ApplyEntityRequest, opts ...grpc.CallOption) (*ApplyEntityResponse, error) {
	out := new(ApplyEntityResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ApplyEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error) {
	out := new(ArchiveProjectResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ArchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ApplyFeatureTable(ctx context.Context, in *ApplyFeatureTableRequest, opts ...grpc.CallOption) (*ApplyFeatureTableResponse, error) {
	out := new(ApplyFeatureTableResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ApplyFeatureTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListFeatureTables(ctx context.Context, in *ListFeatureTablesRequest, opts ...grpc.CallOption) (*ListFeatureTablesResponse, error) {
	out := new(ListFeatureTablesResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListFeatureTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetFeatureTable(ctx context.Context, in *GetFeatureTableRequest, opts ...grpc.CallOption) (*GetFeatureTableResponse, error) {
	out := new(GetFeatureTableResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/GetFeatureTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteFeatureTable(ctx context.Context, in *DeleteFeatureTableRequest, opts ...grpc.CallOption) (*DeleteFeatureTableResponse, error) {
	out := new(DeleteFeatureTableResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/DeleteFeatureTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListOnlineStores(ctx context.Context, in *ListOnlineStoresRequest, opts ...grpc.CallOption) (*ListOnlineStoresResponse, error) {
	out := new(ListOnlineStoresResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ListOnlineStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetOnlineStore(ctx context.Context, in *GetOnlineStoreRequest, opts ...grpc.CallOption) (*GetOnlineStoreResponse, error) {
	out := new(GetOnlineStoreResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/GetOnlineStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) RegisterOnlineStore(ctx context.Context, in *RegisterOnlineStoreRequest, opts ...grpc.CallOption) (*RegisterOnlineStoreResponse, error) {
	out := new(RegisterOnlineStoreResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/RegisterOnlineStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ArchiveOnlineStore(ctx context.Context, in *ArchiveOnlineStoreRequest, opts ...grpc.CallOption) (*ArchiveOnlineStoreResponse, error) {
	out := new(ArchiveOnlineStoreResponse)
	err := c.cc.Invoke(ctx, "/feast.core.CoreService/ArchiveOnlineStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations should embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	// Retrieve version information about this Feast deployment
	GetFeastCoreVersion(context.Context, *GetFeastCoreVersionRequest) (*GetFeastCoreVersionResponse, error)
	// Returns a specific entity
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	// Returns all feature references and respective features matching that filter. If none are found
	// an empty map will be returned
	// If no filter is provided in the request, the response will contain all the features
	// currently stored in the default project.
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error)
	// Create or update and existing entity.
	//
	// This function is idempotent - it will not create a new entity if schema does not change.
	// Schema changes will update the entity if the changes are valid.
	// Following changes are not valid:
	// - Changes to name
	// - Changes to type
	ApplyEntity(context.Context, *ApplyEntityRequest) (*ApplyEntityResponse, error)
	// Returns all entity references and respective entities matching that filter. If none are found
	// an empty map will be returned
	// If no filter is provided in the request, the response will contain all the entities
	// currently stored in the default project.
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	// Creates a project. Projects serve as namespaces within which resources like features will be
	// created. Feature table names as must be unique within a project while field (Feature/Entity) names
	// must be unique within a Feature Table. Project names themselves must be globally unique.
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Archives a project. Archived projects will continue to exist and function, but won't be visible
	// through the Core API. Any existing ingestion or serving requests will continue to function,
	// but will result in warning messages being logged. It is not possible to unarchive a project
	// through the Core API
	ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error)
	// Lists all projects active projects.
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Create or update an existing feature table.
	// This function is idempotent - it will not create a new feature table if the schema does not change.
	// Schema changes will update the feature table if the changes are valid.
	// All changes except the following are valid:
	// - Changes to feature table name.
	// - Changes to entities
	// - Changes to feature name and type
	ApplyFeatureTable(context.Context, *ApplyFeatureTableRequest) (*ApplyFeatureTableResponse, error)
	// List feature tables that match a given filter.
	// Returns the references of the Feature Tables matching that filter. If none are found,
	// an empty list will be returned.
	// If no filter is provided in the request, the response will match all the feature
	// tables currently stored in the registry.
	ListFeatureTables(context.Context, *ListFeatureTablesRequest) (*ListFeatureTablesResponse, error)
	// Returns a specific feature table
	GetFeatureTable(context.Context, *GetFeatureTableRequest) (*GetFeatureTableResponse, error)
	// Delete a specific feature table
	DeleteFeatureTable(context.Context, *DeleteFeatureTableRequest) (*DeleteFeatureTableResponse, error)
	// Lists all online stores
	ListOnlineStores(context.Context, *ListOnlineStoresRequest) (*ListOnlineStoresResponse, error)
	// Returns a specific online stores
	GetOnlineStore(context.Context, *GetOnlineStoreRequest) (*GetOnlineStoreResponse, error)
	// Registers new online store to feast core
	// or updates properties for existing online store
	RegisterOnlineStore(context.Context, *RegisterOnlineStoreRequest) (*RegisterOnlineStoreResponse, error)
	// Archives an online store to mark it deprecated
	ArchiveOnlineStore(context.Context, *ArchiveOnlineStoreRequest) (*ArchiveOnlineStoreResponse, error)
}

// UnimplementedCoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) GetFeastCoreVersion(context.Context, *GetFeastCoreVersionRequest) (*GetFeastCoreVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeastCoreVersion not implemented")
}
func (UnimplementedCoreServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedCoreServiceServer) ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedCoreServiceServer) ApplyEntity(context.Context, *ApplyEntityRequest) (*ApplyEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyEntity not implemented")
}
func (UnimplementedCoreServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedCoreServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedCoreServiceServer) ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (UnimplementedCoreServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedCoreServiceServer) ApplyFeatureTable(context.Context, *ApplyFeatureTableRequest) (*ApplyFeatureTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFeatureTable not implemented")
}
func (UnimplementedCoreServiceServer) ListFeatureTables(context.Context, *ListFeatureTablesRequest) (*ListFeatureTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureTables not implemented")
}
func (UnimplementedCoreServiceServer) GetFeatureTable(context.Context, *GetFeatureTableRequest) (*GetFeatureTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureTable not implemented")
}
func (UnimplementedCoreServiceServer) DeleteFeatureTable(context.Context, *DeleteFeatureTableRequest) (*DeleteFeatureTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureTable not implemented")
}
func (UnimplementedCoreServiceServer) ListOnlineStores(context.Context, *ListOnlineStoresRequest) (*ListOnlineStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnlineStores not implemented")
}
func (UnimplementedCoreServiceServer) GetOnlineStore(context.Context, *GetOnlineStoreRequest) (*GetOnlineStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineStore not implemented")
}
func (UnimplementedCoreServiceServer) RegisterOnlineStore(context.Context, *RegisterOnlineStoreRequest) (*RegisterOnlineStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOnlineStore not implemented")
}
func (UnimplementedCoreServiceServer) ArchiveOnlineStore(context.Context, *ArchiveOnlineStoreRequest) (*ArchiveOnlineStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveOnlineStore not implemented")
}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_GetFeastCoreVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeastCoreVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetFeastCoreVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/GetFeastCoreVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetFeastCoreVersion(ctx, req.(*GetFeastCoreVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListFeatures(ctx, req.(*ListFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ApplyEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ApplyEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ApplyEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ApplyEntity(ctx, req.(*ApplyEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ArchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ArchiveProject(ctx, req.(*ArchiveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ApplyFeatureTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFeatureTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ApplyFeatureTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ApplyFeatureTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ApplyFeatureTable(ctx, req.(*ApplyFeatureTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListFeatureTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListFeatureTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListFeatureTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListFeatureTables(ctx, req.(*ListFeatureTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetFeatureTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetFeatureTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/GetFeatureTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetFeatureTable(ctx, req.(*GetFeatureTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteFeatureTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteFeatureTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/DeleteFeatureTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteFeatureTable(ctx, req.(*DeleteFeatureTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListOnlineStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOnlineStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListOnlineStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ListOnlineStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListOnlineStores(ctx, req.(*ListOnlineStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetOnlineStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetOnlineStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/GetOnlineStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetOnlineStore(ctx, req.(*GetOnlineStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_RegisterOnlineStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOnlineStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).RegisterOnlineStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/RegisterOnlineStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).RegisterOnlineStore(ctx, req.(*RegisterOnlineStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ArchiveOnlineStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveOnlineStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ArchiveOnlineStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feast.core.CoreService/ArchiveOnlineStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ArchiveOnlineStore(ctx, req.(*ArchiveOnlineStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feast.core.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeastCoreVersion",
			Handler:    _CoreService_GetFeastCoreVersion_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _CoreService_GetEntity_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _CoreService_ListFeatures_Handler,
		},
		{
			MethodName: "ApplyEntity",
			Handler:    _CoreService_ApplyEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _CoreService_ListEntities_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _CoreService_CreateProject_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _CoreService_ArchiveProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _CoreService_ListProjects_Handler,
		},
		{
			MethodName: "ApplyFeatureTable",
			Handler:    _CoreService_ApplyFeatureTable_Handler,
		},
		{
			MethodName: "ListFeatureTables",
			Handler:    _CoreService_ListFeatureTables_Handler,
		},
		{
			MethodName: "GetFeatureTable",
			Handler:    _CoreService_GetFeatureTable_Handler,
		},
		{
			MethodName: "DeleteFeatureTable",
			Handler:    _CoreService_DeleteFeatureTable_Handler,
		},
		{
			MethodName: "ListOnlineStores",
			Handler:    _CoreService_ListOnlineStores_Handler,
		},
		{
			MethodName: "GetOnlineStore",
			Handler:    _CoreService_GetOnlineStore_Handler,
		},
		{
			MethodName: "RegisterOnlineStore",
			Handler:    _CoreService_RegisterOnlineStore_Handler,
		},
		{
			MethodName: "ArchiveOnlineStore",
			Handler:    _CoreService_ArchiveOnlineStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feast/core/CoreService.proto",
}
