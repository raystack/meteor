// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/odpf/meteor/plugins/extractors/caramlstore/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// CoreServer is an autogenerated mock type for the CoreServiceServer type
type CoreServer struct {
	mock.Mock
}

type CoreServer_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreServer) EXPECT() *CoreServer_Expecter {
	return &CoreServer_Expecter{mock: &_m.Mock}
}

// ApplyEntity provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ApplyEntity(_a0 context.Context, _a1 *core.ApplyEntityRequest) (*core.ApplyEntityResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ApplyEntityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ApplyEntityRequest) *core.ApplyEntityResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ApplyEntityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ApplyEntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ApplyEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyEntity'
type CoreServer_ApplyEntity_Call struct {
	*mock.Call
}

// ApplyEntity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ApplyEntityRequest
func (_e *CoreServer_Expecter) ApplyEntity(_a0 interface{}, _a1 interface{}) *CoreServer_ApplyEntity_Call {
	return &CoreServer_ApplyEntity_Call{Call: _e.mock.On("ApplyEntity", _a0, _a1)}
}

func (_c *CoreServer_ApplyEntity_Call) Run(run func(_a0 context.Context, _a1 *core.ApplyEntityRequest)) *CoreServer_ApplyEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ApplyEntityRequest))
	})
	return _c
}

func (_c *CoreServer_ApplyEntity_Call) Return(_a0 *core.ApplyEntityResponse, _a1 error) *CoreServer_ApplyEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ApplyFeatureTable provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ApplyFeatureTable(_a0 context.Context, _a1 *core.ApplyFeatureTableRequest) (*core.ApplyFeatureTableResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ApplyFeatureTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ApplyFeatureTableRequest) *core.ApplyFeatureTableResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ApplyFeatureTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ApplyFeatureTableRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ApplyFeatureTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyFeatureTable'
type CoreServer_ApplyFeatureTable_Call struct {
	*mock.Call
}

// ApplyFeatureTable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ApplyFeatureTableRequest
func (_e *CoreServer_Expecter) ApplyFeatureTable(_a0 interface{}, _a1 interface{}) *CoreServer_ApplyFeatureTable_Call {
	return &CoreServer_ApplyFeatureTable_Call{Call: _e.mock.On("ApplyFeatureTable", _a0, _a1)}
}

func (_c *CoreServer_ApplyFeatureTable_Call) Run(run func(_a0 context.Context, _a1 *core.ApplyFeatureTableRequest)) *CoreServer_ApplyFeatureTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ApplyFeatureTableRequest))
	})
	return _c
}

func (_c *CoreServer_ApplyFeatureTable_Call) Return(_a0 *core.ApplyFeatureTableResponse, _a1 error) *CoreServer_ApplyFeatureTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ArchiveOnlineStore provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ArchiveOnlineStore(_a0 context.Context, _a1 *core.ArchiveOnlineStoreRequest) (*core.ArchiveOnlineStoreResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ArchiveOnlineStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ArchiveOnlineStoreRequest) *core.ArchiveOnlineStoreResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ArchiveOnlineStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ArchiveOnlineStoreRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ArchiveOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveOnlineStore'
type CoreServer_ArchiveOnlineStore_Call struct {
	*mock.Call
}

// ArchiveOnlineStore is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ArchiveOnlineStoreRequest
func (_e *CoreServer_Expecter) ArchiveOnlineStore(_a0 interface{}, _a1 interface{}) *CoreServer_ArchiveOnlineStore_Call {
	return &CoreServer_ArchiveOnlineStore_Call{Call: _e.mock.On("ArchiveOnlineStore", _a0, _a1)}
}

func (_c *CoreServer_ArchiveOnlineStore_Call) Run(run func(_a0 context.Context, _a1 *core.ArchiveOnlineStoreRequest)) *CoreServer_ArchiveOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ArchiveOnlineStoreRequest))
	})
	return _c
}

func (_c *CoreServer_ArchiveOnlineStore_Call) Return(_a0 *core.ArchiveOnlineStoreResponse, _a1 error) *CoreServer_ArchiveOnlineStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ArchiveProject provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ArchiveProject(_a0 context.Context, _a1 *core.ArchiveProjectRequest) (*core.ArchiveProjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ArchiveProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ArchiveProjectRequest) *core.ArchiveProjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ArchiveProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ArchiveProjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ArchiveProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveProject'
type CoreServer_ArchiveProject_Call struct {
	*mock.Call
}

// ArchiveProject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ArchiveProjectRequest
func (_e *CoreServer_Expecter) ArchiveProject(_a0 interface{}, _a1 interface{}) *CoreServer_ArchiveProject_Call {
	return &CoreServer_ArchiveProject_Call{Call: _e.mock.On("ArchiveProject", _a0, _a1)}
}

func (_c *CoreServer_ArchiveProject_Call) Run(run func(_a0 context.Context, _a1 *core.ArchiveProjectRequest)) *CoreServer_ArchiveProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ArchiveProjectRequest))
	})
	return _c
}

func (_c *CoreServer_ArchiveProject_Call) Return(_a0 *core.ArchiveProjectResponse, _a1 error) *CoreServer_ArchiveProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateProject provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) CreateProject(_a0 context.Context, _a1 *core.CreateProjectRequest) (*core.CreateProjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.CreateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.CreateProjectRequest) *core.CreateProjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CreateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.CreateProjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type CoreServer_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.CreateProjectRequest
func (_e *CoreServer_Expecter) CreateProject(_a0 interface{}, _a1 interface{}) *CoreServer_CreateProject_Call {
	return &CoreServer_CreateProject_Call{Call: _e.mock.On("CreateProject", _a0, _a1)}
}

func (_c *CoreServer_CreateProject_Call) Run(run func(_a0 context.Context, _a1 *core.CreateProjectRequest)) *CoreServer_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.CreateProjectRequest))
	})
	return _c
}

func (_c *CoreServer_CreateProject_Call) Return(_a0 *core.CreateProjectResponse, _a1 error) *CoreServer_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteFeatureTable provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) DeleteFeatureTable(_a0 context.Context, _a1 *core.DeleteFeatureTableRequest) (*core.DeleteFeatureTableResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.DeleteFeatureTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.DeleteFeatureTableRequest) *core.DeleteFeatureTableResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DeleteFeatureTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.DeleteFeatureTableRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_DeleteFeatureTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFeatureTable'
type CoreServer_DeleteFeatureTable_Call struct {
	*mock.Call
}

// DeleteFeatureTable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.DeleteFeatureTableRequest
func (_e *CoreServer_Expecter) DeleteFeatureTable(_a0 interface{}, _a1 interface{}) *CoreServer_DeleteFeatureTable_Call {
	return &CoreServer_DeleteFeatureTable_Call{Call: _e.mock.On("DeleteFeatureTable", _a0, _a1)}
}

func (_c *CoreServer_DeleteFeatureTable_Call) Run(run func(_a0 context.Context, _a1 *core.DeleteFeatureTableRequest)) *CoreServer_DeleteFeatureTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.DeleteFeatureTableRequest))
	})
	return _c
}

func (_c *CoreServer_DeleteFeatureTable_Call) Return(_a0 *core.DeleteFeatureTableResponse, _a1 error) *CoreServer_DeleteFeatureTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEntity provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) GetEntity(_a0 context.Context, _a1 *core.GetEntityRequest) (*core.GetEntityResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.GetEntityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetEntityRequest) *core.GetEntityResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetEntityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetEntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_GetEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntity'
type CoreServer_GetEntity_Call struct {
	*mock.Call
}

// GetEntity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.GetEntityRequest
func (_e *CoreServer_Expecter) GetEntity(_a0 interface{}, _a1 interface{}) *CoreServer_GetEntity_Call {
	return &CoreServer_GetEntity_Call{Call: _e.mock.On("GetEntity", _a0, _a1)}
}

func (_c *CoreServer_GetEntity_Call) Run(run func(_a0 context.Context, _a1 *core.GetEntityRequest)) *CoreServer_GetEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.GetEntityRequest))
	})
	return _c
}

func (_c *CoreServer_GetEntity_Call) Return(_a0 *core.GetEntityResponse, _a1 error) *CoreServer_GetEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFeastCoreVersion provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) GetFeastCoreVersion(_a0 context.Context, _a1 *core.GetFeastCoreVersionRequest) (*core.GetFeastCoreVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.GetFeastCoreVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetFeastCoreVersionRequest) *core.GetFeastCoreVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetFeastCoreVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetFeastCoreVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_GetFeastCoreVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeastCoreVersion'
type CoreServer_GetFeastCoreVersion_Call struct {
	*mock.Call
}

// GetFeastCoreVersion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.GetFeastCoreVersionRequest
func (_e *CoreServer_Expecter) GetFeastCoreVersion(_a0 interface{}, _a1 interface{}) *CoreServer_GetFeastCoreVersion_Call {
	return &CoreServer_GetFeastCoreVersion_Call{Call: _e.mock.On("GetFeastCoreVersion", _a0, _a1)}
}

func (_c *CoreServer_GetFeastCoreVersion_Call) Run(run func(_a0 context.Context, _a1 *core.GetFeastCoreVersionRequest)) *CoreServer_GetFeastCoreVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.GetFeastCoreVersionRequest))
	})
	return _c
}

func (_c *CoreServer_GetFeastCoreVersion_Call) Return(_a0 *core.GetFeastCoreVersionResponse, _a1 error) *CoreServer_GetFeastCoreVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFeatureTable provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) GetFeatureTable(_a0 context.Context, _a1 *core.GetFeatureTableRequest) (*core.GetFeatureTableResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.GetFeatureTableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetFeatureTableRequest) *core.GetFeatureTableResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetFeatureTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetFeatureTableRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_GetFeatureTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatureTable'
type CoreServer_GetFeatureTable_Call struct {
	*mock.Call
}

// GetFeatureTable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.GetFeatureTableRequest
func (_e *CoreServer_Expecter) GetFeatureTable(_a0 interface{}, _a1 interface{}) *CoreServer_GetFeatureTable_Call {
	return &CoreServer_GetFeatureTable_Call{Call: _e.mock.On("GetFeatureTable", _a0, _a1)}
}

func (_c *CoreServer_GetFeatureTable_Call) Run(run func(_a0 context.Context, _a1 *core.GetFeatureTableRequest)) *CoreServer_GetFeatureTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.GetFeatureTableRequest))
	})
	return _c
}

func (_c *CoreServer_GetFeatureTable_Call) Return(_a0 *core.GetFeatureTableResponse, _a1 error) *CoreServer_GetFeatureTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOnlineStore provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) GetOnlineStore(_a0 context.Context, _a1 *core.GetOnlineStoreRequest) (*core.GetOnlineStoreResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.GetOnlineStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.GetOnlineStoreRequest) *core.GetOnlineStoreResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetOnlineStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.GetOnlineStoreRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_GetOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnlineStore'
type CoreServer_GetOnlineStore_Call struct {
	*mock.Call
}

// GetOnlineStore is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.GetOnlineStoreRequest
func (_e *CoreServer_Expecter) GetOnlineStore(_a0 interface{}, _a1 interface{}) *CoreServer_GetOnlineStore_Call {
	return &CoreServer_GetOnlineStore_Call{Call: _e.mock.On("GetOnlineStore", _a0, _a1)}
}

func (_c *CoreServer_GetOnlineStore_Call) Run(run func(_a0 context.Context, _a1 *core.GetOnlineStoreRequest)) *CoreServer_GetOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.GetOnlineStoreRequest))
	})
	return _c
}

func (_c *CoreServer_GetOnlineStore_Call) Return(_a0 *core.GetOnlineStoreResponse, _a1 error) *CoreServer_GetOnlineStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListEntities provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ListEntities(_a0 context.Context, _a1 *core.ListEntitiesRequest) (*core.ListEntitiesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ListEntitiesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListEntitiesRequest) *core.ListEntitiesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListEntitiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListEntitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ListEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntities'
type CoreServer_ListEntities_Call struct {
	*mock.Call
}

// ListEntities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ListEntitiesRequest
func (_e *CoreServer_Expecter) ListEntities(_a0 interface{}, _a1 interface{}) *CoreServer_ListEntities_Call {
	return &CoreServer_ListEntities_Call{Call: _e.mock.On("ListEntities", _a0, _a1)}
}

func (_c *CoreServer_ListEntities_Call) Run(run func(_a0 context.Context, _a1 *core.ListEntitiesRequest)) *CoreServer_ListEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ListEntitiesRequest))
	})
	return _c
}

func (_c *CoreServer_ListEntities_Call) Return(_a0 *core.ListEntitiesResponse, _a1 error) *CoreServer_ListEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListFeatureTables provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ListFeatureTables(_a0 context.Context, _a1 *core.ListFeatureTablesRequest) (*core.ListFeatureTablesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ListFeatureTablesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListFeatureTablesRequest) *core.ListFeatureTablesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListFeatureTablesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListFeatureTablesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ListFeatureTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatureTables'
type CoreServer_ListFeatureTables_Call struct {
	*mock.Call
}

// ListFeatureTables is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ListFeatureTablesRequest
func (_e *CoreServer_Expecter) ListFeatureTables(_a0 interface{}, _a1 interface{}) *CoreServer_ListFeatureTables_Call {
	return &CoreServer_ListFeatureTables_Call{Call: _e.mock.On("ListFeatureTables", _a0, _a1)}
}

func (_c *CoreServer_ListFeatureTables_Call) Run(run func(_a0 context.Context, _a1 *core.ListFeatureTablesRequest)) *CoreServer_ListFeatureTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ListFeatureTablesRequest))
	})
	return _c
}

func (_c *CoreServer_ListFeatureTables_Call) Return(_a0 *core.ListFeatureTablesResponse, _a1 error) *CoreServer_ListFeatureTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListFeatures provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ListFeatures(_a0 context.Context, _a1 *core.ListFeaturesRequest) (*core.ListFeaturesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ListFeaturesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListFeaturesRequest) *core.ListFeaturesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListFeaturesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListFeaturesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ListFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeatures'
type CoreServer_ListFeatures_Call struct {
	*mock.Call
}

// ListFeatures is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ListFeaturesRequest
func (_e *CoreServer_Expecter) ListFeatures(_a0 interface{}, _a1 interface{}) *CoreServer_ListFeatures_Call {
	return &CoreServer_ListFeatures_Call{Call: _e.mock.On("ListFeatures", _a0, _a1)}
}

func (_c *CoreServer_ListFeatures_Call) Run(run func(_a0 context.Context, _a1 *core.ListFeaturesRequest)) *CoreServer_ListFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ListFeaturesRequest))
	})
	return _c
}

func (_c *CoreServer_ListFeatures_Call) Return(_a0 *core.ListFeaturesResponse, _a1 error) *CoreServer_ListFeatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListOnlineStores provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ListOnlineStores(_a0 context.Context, _a1 *core.ListOnlineStoresRequest) (*core.ListOnlineStoresResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ListOnlineStoresResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListOnlineStoresRequest) *core.ListOnlineStoresResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListOnlineStoresResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListOnlineStoresRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ListOnlineStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOnlineStores'
type CoreServer_ListOnlineStores_Call struct {
	*mock.Call
}

// ListOnlineStores is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ListOnlineStoresRequest
func (_e *CoreServer_Expecter) ListOnlineStores(_a0 interface{}, _a1 interface{}) *CoreServer_ListOnlineStores_Call {
	return &CoreServer_ListOnlineStores_Call{Call: _e.mock.On("ListOnlineStores", _a0, _a1)}
}

func (_c *CoreServer_ListOnlineStores_Call) Run(run func(_a0 context.Context, _a1 *core.ListOnlineStoresRequest)) *CoreServer_ListOnlineStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ListOnlineStoresRequest))
	})
	return _c
}

func (_c *CoreServer_ListOnlineStores_Call) Return(_a0 *core.ListOnlineStoresResponse, _a1 error) *CoreServer_ListOnlineStores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListProjects provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) ListProjects(_a0 context.Context, _a1 *core.ListProjectsRequest) (*core.ListProjectsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListProjectsRequest) *core.ListProjectsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.ListProjectsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type CoreServer_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.ListProjectsRequest
func (_e *CoreServer_Expecter) ListProjects(_a0 interface{}, _a1 interface{}) *CoreServer_ListProjects_Call {
	return &CoreServer_ListProjects_Call{Call: _e.mock.On("ListProjects", _a0, _a1)}
}

func (_c *CoreServer_ListProjects_Call) Run(run func(_a0 context.Context, _a1 *core.ListProjectsRequest)) *CoreServer_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ListProjectsRequest))
	})
	return _c
}

func (_c *CoreServer_ListProjects_Call) Return(_a0 *core.ListProjectsResponse, _a1 error) *CoreServer_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterOnlineStore provides a mock function with given fields: _a0, _a1
func (_m *CoreServer) RegisterOnlineStore(_a0 context.Context, _a1 *core.RegisterOnlineStoreRequest) (*core.RegisterOnlineStoreResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.RegisterOnlineStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *core.RegisterOnlineStoreRequest) *core.RegisterOnlineStoreResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.RegisterOnlineStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.RegisterOnlineStoreRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreServer_RegisterOnlineStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterOnlineStore'
type CoreServer_RegisterOnlineStore_Call struct {
	*mock.Call
}

// RegisterOnlineStore is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *core.RegisterOnlineStoreRequest
func (_e *CoreServer_Expecter) RegisterOnlineStore(_a0 interface{}, _a1 interface{}) *CoreServer_RegisterOnlineStore_Call {
	return &CoreServer_RegisterOnlineStore_Call{Call: _e.mock.On("RegisterOnlineStore", _a0, _a1)}
}

func (_c *CoreServer_RegisterOnlineStore_Call) Run(run func(_a0 context.Context, _a1 *core.RegisterOnlineStoreRequest)) *CoreServer_RegisterOnlineStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.RegisterOnlineStoreRequest))
	})
	return _c
}

func (_c *CoreServer_RegisterOnlineStore_Call) Return(_a0 *core.RegisterOnlineStoreResponse, _a1 error) *CoreServer_RegisterOnlineStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCoreServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoreServer creates a new instance of CoreServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoreServer(t mockConstructorTestingTNewCoreServer) *CoreServer {
	mock := &CoreServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
